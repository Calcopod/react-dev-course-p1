{"version":3,"sources":["Components/Card/card.jsx","Components/CardList/card_list.jsx","Components/Searchbox/searchbox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","idx","email","phone","CardList","console","log","monsters","map","SearchBox","placeholder","onChange","type","App","handleChange","e","setState","searchfield","target","value","state","fetch","then","res","json","users","filtered","this","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAceA,EAXF,SAAAC,GACX,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,KAAxC,4BACtB,6BAAqBL,EAAMI,QAAQC,MAA1BL,EAAMM,KACf,kCAAKN,EAAMI,QAAQG,MAAnB,OACA,kCAAKP,EAAMI,QAAQI,MAAnB,WCSSC,G,MAdE,SAAAT,GAGf,OAFAU,QAAQC,IAAKX,GAGX,qBAAKC,UAAU,YAAf,SAEID,EAAMY,SAASC,KAAK,SAACT,EAASE,GAAV,OAClB,cAAC,EAAD,CAAMA,IAAKA,EAAKF,QAASA,WCEpBU,G,YAVG,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAC/B,OACE,uBACEC,KAAK,SACLF,YAAcA,EACdC,SAAWA,MCkCFE,E,kDAnCb,aAAe,IAAD,8BACZ,gBAcFC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IALL,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO7C,WAAU,IAAD,OAEDC,EADeC,KAAKP,MAAlBb,SACkBqB,QAAQ,SAAC7B,EAASE,GAAV,OAChCF,EAAQC,KAAK6B,cAAcC,SAAU,EAAKV,MAAMH,YAAYY,kBAG9D,OACE,sBAAKjC,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CAAWc,YAAY,iBAAiBC,SAAUgB,KAAKb,eACvD,cAAC,EAAD,CAAUP,SAAUmB,W,GA9BVK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3ccc7027.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nconst Card = props => {\n  return (\n    <div className=\"card-container\">\n      <img alt=\"Monster\" src={`https://robohash.org/${props.monster.name}?set=set1&size=180x180`} />\n      <h1 key={props.idx}>{props.monster.name}</h1>\n      <p> {props.monster.email} </p>\n      <p> {props.monster.phone} </p>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../Card/card';\nimport './card_list.styles.css'\n\nconst CardList = props => {\n  console.log( props )\n\n  return (\n    <div className=\"card-list\">\n      {\n        props.monsters.map( (monster, idx) => (\n          <Card idx={idx} monster={monster} />\n        ))\n      }\n    </div>\n  )\n}\n\nexport default CardList;","import React from 'react';\nimport './searchbox.styles.css'\n\nconst SearchBox = ({placeholder, onChange}) => {\n  return (\n    <input\n      type='search' \n      placeholder= {placeholder}\n      onChange={ onChange }\n    />\n  )\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport CardList from './Components/CardList/card_list.jsx'\n\nimport './App.css';\nimport SearchBox from './Components/Searchbox/searchbox.jsx';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n        monsters: [],\n        searchfield: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then( res => res.json() )\n      .then( users => this.setState({monsters: users}) )\n  }\n\n  handleChange = e => {\n    this.setState({searchfield: e.target.value})\n  }\n\n  render() {\n    const { monsters } = this.state;\n    const filtered = monsters.filter( (monster, idx) => \n      monster.name.toLowerCase().includes( this.state.searchfield.toLowerCase() ) \n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Robot Roledex</h1>\n        <SearchBox placeholder=\"Monsters . . .\" onChange={this.handleChange}/>\n        <CardList monsters={filtered} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}